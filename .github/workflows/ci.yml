name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  pull-requests: write

jobs:
  lint-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
      - name: Lint with flake8
        run: |
          flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Format with black
        run: |
          black backend
      - name: Fix imports with isort
        run: |
          isort --profile black backend
      - name: Commit auto-formatted changes
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add backend
          git diff --quiet && git diff --staged --quiet || git commit -m "Auto-format with black and isort" -a
          git push

  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: 'frontend/package.json'
      - name: Install Yarn
        run: npm install -g yarn
      - name: Install dependencies
        run: |
          cd frontend
          yarn install
      - name: Lint with ESLint
        run: |
          cd frontend
          yarn lint

  test-backend:
    runs-on: ubuntu-latest
    needs: lint-backend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
          pip install pytest==8.3.4 pytest-cov==6.0.0 pytest-mock==3.14.0 httpx==0.24.1
          pip install opentelemetry-api==1.21.0 \
                      opentelemetry-sdk==1.21.0 \
                      opentelemetry-exporter-otlp==1.21.0 \
                      opentelemetry-instrumentation-fastapi==0.42b0 \
                      opentelemetry-instrumentation-sqlalchemy==0.42b0 \
                      opentelemetry-semantic-conventions==0.42b0
          pip install setuptools>=65.5.1
      - name: Run API tests
        run: |
          cd backend
          python -m pytest tests/test_main_app.py tests/api/v1/test_main.py tests/api/v1/test_auth.py::test_login tests/api/v1/test_knowledge.py tests/api/v1/test_root.py -v --cov=app.api.v1.endpoints --cov=main --cov-report=xml
        env:
          TESTING: "true"
          DATABASE_URL: "sqlite:///:memory:"
          TEST_DATABASE_URL: "sqlite:///:memory:"
          JWT_SECRET: "test_secret_key"
          API_KEY_ENCRYPTION_KEY: "TEST_KEY_NOT_REAL_FOR_TESTING_ONLY_1234567890"
          OPENAI_API_KEY: "sk-test-key-not-real"
      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./backend/coverage.xml
          fail_ci_if_error: false

  build-docker:
    runs-on: ubuntu-latest
    needs: [lint-backend, lint-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: false
          load: true
          tags: anime-companion-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: false
          load: true
          tags: anime-companion-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max 